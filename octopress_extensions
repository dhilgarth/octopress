require "stringex"

## -- Config -- ##
source_dir              = "source"    # source file directory
posts_submodule_root    = "_posts"    # directory the posts submodule is registered at

task :pull_posts do
  
  cd "#{source_dir}/#{posts_submodule_root}" do
    status = `git status --porcelain`
    unless status.empty?
      puts status
      abort("rake aborted") if ask("You have uncommitted changes. Are you sure you want to discard them?", ['y', 'n']) == 'n'
      system "git reset --hard"
      system "git clean -fd"
    end
    system "git checkout blog"
    system "git pull"
  end
  system "git add #{source_dir}/#{posts_submodule_root}"
  system "git commit -m \"Update posts\""
end

task :push_posts, :message do |t, args|

  if args.message
    message = args.message
  else
    message = "Commit latest changes to posts"
  end
  
  cd "#{source_dir}/#{posts_submodule_root}" do
    status = `git status --porcelain`
    
    unless status.empty?
      current_branch = `git rev-parse --abbrev-ref HEAD`
      unless current_branch == "blog"
        abort("rake aborted") unless ask("You have uncommitted changes and you are not on branch \"blog\". Switching branches with uncommitted changes can lead to conflicts. Are you sure you want to switch?", ['y', 'n']) == 'y'
        system "git checkout blog"
      end
      abort("rake aborted") unless ask("#{status}\nThese are your uncommitted changes. Are you sure you want to commit them all?", ['y', 'n']) == 'n'
      system "git add ."
      system "git commit -m \"#{status}\""
    else
      system "git checkout blog"
    end
    system "git push"
  end
  system "git add #{source_dir}/#{posts_submodule_root}"
  system "git commit -m \"Update posts\""

end

def get_stdin(message)
  print message
  STDIN.gets.chomp
end

def ask(message, valid_options)
  if valid_options
    answer = get_stdin("#{message} #{valid_options.to_s.gsub(/"/, '').gsub(/, /,'/')} ") while !valid_options.include?(answer)
  else
    answer = get_stdin(message)
  end
  answer
end
